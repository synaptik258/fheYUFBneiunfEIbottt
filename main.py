import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ParseMode



ADMIN_ID = 6202982315  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
TOKEN = '7439369007:AAEkiULHkV0t1cguVZtB-0at-Z6F0AUkVDY'  # –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

def load_tasks(filename="tasks.json"):
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

tasks = load_tasks()
user_progress = {}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è
async def send_task(context, user_id):
    step = user_progress.get(user_id, 0)
    if step >= len(tasks):
        await context.bot.send_message(chat_id=user_id, text="–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! üèÅüí´\n–¢—ã –ø—Ä–æ—à–ª–∞ –≤–µ—Å—å –∫–≤–µ—Å—Ç!üíò\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî —è –±–µ–∑–º–µ—Ä–Ω–æ –ª—é–±–ª—é —Ç–µ–±—è  üíñ ")
        return

    task = tasks[step]
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"approve_{user_id}")]])
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç:\n\n–ó–∞–¥–∞–Ω–∏–µ {step + 1}: {task['title']}", reply_markup=keyboard)

    if task["type"] == "choice":
        for opt in task["options"]:
            with open(opt["image"], "rb") as img:
                await context.bot.send_photo(chat_id=user_id, photo=img, caption=opt["caption"])
        await context.bot.send_message(chat_id=user_id, text=task["prompt"])
    else:
        await context.bot.send_message(chat_id=user_id, text=task["prompt"], parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_progress:
        user_progress[user_id] = 0

    step = user_progress.get(user_id, 0)
    if step >= len(tasks):
        await update.message.reply_text("–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! üèÅüí´\n–¢—ã –ø—Ä–æ—à–ª–∞ –≤–µ—Å—å –∫–≤–µ—Å—Ç!üíò\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚Äî —è –±–µ–∑–º–µ—Ä–Ω–æ –ª—é–±–ª—é —Ç–µ–±—è  üíñ")
        return

    task = tasks[step]

    # –ï—Å–ª–∏ QR-–∑–∞–¥–∞–Ω–∏–µ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç qr
    if task["type"] == "qr" and context.args and context.args[0].lower() == "qr":
        await update.message.reply_text(task["success"])
        user_progress[user_id] += 1
        await send_task(context, user_id)
        return

    await update.message.reply_text(
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ—è –ª—é–±–æ–≤—å! ‚òÄÔ∏èüíã\n–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å, –ø–æ–ª–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑–æ–≤, –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ ‚ú®\n–ù–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å‚Ä¶ –ì–æ—Ç–æ–≤–∞? üíñ",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_quest")]])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start_quest":
        await send_task(context, query.from_user.id)

    elif query.data.startswith("approve_"):
        uid = int(query.data.split("_")[1])
        task = tasks[user_progress[uid]]
        await context.bot.send_message(chat_id=uid, text=task["success"])
        user_progress[uid] += 1
        await send_task(context, uid)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–∞–¥–æ–∫)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    step = user_progress.get(user_id, 0)
    if step >= len(tasks):
        return

    task = tasks[step]
    user_text = update.message.text.strip().lower()

    if task["type"] == "riddle":
        if user_text == task["answer"]:
            await context.bot.send_message(chat_id=user_id, text=task["success"])
            user_progress[user_id] += 1
            await send_task(context, user_id)
        else:
            await context.bot.send_message(chat_id=user_id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
